// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "net/http"

func hasRegularUserId(r *http.Request) bool {
	return r.URL.Query().Get("regular_user_id") != ""
}

func Home(r *http.Request) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>The Regular - Realtime Voting</title><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><style>\n\t\t\tbody { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n\t\t\t.vote-round { margin-bottom: 30px; }\n\t\t\t.vote-round h2 { margin-bottom: 15px; }\n\t\t\t.vote-item { margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }\n\t\t\tbutton { padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }\n\t\t\tbutton:hover { background-color: #0056b3; }\n\t\t\t.votes { margin-left: 10px; font-weight: bold; }\n\t\t</style></head><body><h1>The Regular - Realtime Voting</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !hasRegularUserId(r) {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"email-form\"><input type=\"email\" id=\"email-input\" placeholder=\"Enter your email address\"> <button onclick=\"setEmail()\">Set Email</button></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"vote-container\"><!-- Vote rounds and items will be populated here --></div><script>\n\t\t\tlet socket = new WebSocket(\"ws://\" + window.location.host + \"/voter/ws\");\n\t\t\tsocket.onmessage = function(e) {\n\t\t\t\tconst data = JSON.parse(e.data);\n\t\t\t\tif (data.type === \"update\") {\n\t\t\t\t\tupdateVotes(data.results);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction updateVotes(results) {\n\t\t\t\tconst container = document.getElementById(\"vote-container\");\n\t\t\t\tconst rounds = {};\n\n\t\t\t\t// Group items by round\n\t\t\t\tresults.forEach(item => {\n\t\t\t\t\tconst [roundName, itemName] = item.name.split(' - ');\n\t\t\t\t\tif (!rounds[roundName]) {\n\t\t\t\t\t\trounds[roundName] = [];\n\t\t\t\t\t}\n\t\t\t\t\trounds[roundName].push({...item, name: itemName});\n\t\t\t\t});\n\n\t\t\t\t// Generate HTML for each round\n\t\t\t\tcontainer.innerHTML = Object.entries(rounds).map(([roundName, items]) => `\n\t\t\t\t\t<div class=\"vote-round\">\n\t\t\t\t\t\t<h2>${roundName}</h2>\n\t\t\t\t\t\t${items.map(item => `\n\t\t\t\t\t\t\t<div class=\"vote-item\">\n\t\t\t\t\t\t\t\t<button onclick=\"vote(${item.id})\">\n\t\t\t\t\t\t\t\t\tVote for ${item.name}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<span class=\"votes\">${item.votes} votes</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`).join(\"\")}\n\t\t\t\t\t</div>\n\t\t\t\t`).join(\"\");\n\t\t\t}\n\n\t\t\tfunction setEmail() {\n\t\t\t\tconst email = document.getElementById('email-input').value;\n\t\t\t\tconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n\t\t\t\tif (email && emailRegex.test(email)) {\n\t\t\t\t\tconst url = new URL(window.location);\n\t\t\t\t\turl.searchParams.set('regular_user_id', email);\n\t\t\t\t\twindow.history.pushState({}, '', url);\n\t\t\t\t\tlocation.reload(); // Reload the page to hide the email input form\n\t\t\t\t} else {\n\t\t\t\t\talert('Please enter a valid email address.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function vote(itemId) {\n\t\t\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\t\t\tconst regularUserId = urlParams.get('regular_user_id');\n\t\t\t\tif (regularUserId) {\n\t\t\t\t\tconst resp = await fetch(\"/vote\", {\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({ itemId, userIdEmail: regularUserId }),\n\t\t\t\t\t});\n\n\t\t\t\t\tif (resp.ok) {\n\t\t\t\t\t\talert(\"Vote recorded successfully!\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await resp.text();\n\t\t\t\t\t\talert(\"Voting failed: \" + error);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\talert(\"We need your email address to add your vote.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t\t// Initial request for vote data\n\t\t\t\tfetch(\"/vote\")\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t.then(data => updateVotes(data.results));\n\n\t\t\t\t// Set email input value from URL if present\n\t\t\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\t\t\tconst regularUserId = urlParams.get('regular_user_id');\n\t\t\t\tif (regularUserId) {\n\t\t\t\t\tdocument.getElementById('email-input').value = regularUserId;\n\t\t\t\t}\n\t\t\t});\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
